/*
 * Created by Angel Leon (@gubatron), Alden Torres (aldenml)
 * Copyright (c) 2011-2016, FrostWire(R). All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply from: '../common/dependencies.gradle'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

def manifestVersionCode() {
    def manifestFile = file(project.projectDir.absolutePath + '/AndroidManifest.xml')

    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)

    return Integer.parseInt(xml.attributes()[ns.versionCode].toString())
}

def manifestVersionName() {
    def manifestFile = file(project.projectDir.absolutePath + '/AndroidManifest.xml')

    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)

    return xml.attributes()[ns.versionName].toString()
}

def changeApkOutput(variant) {
    def flavor = 'unknown'
    if (variant.productFlavors[0].name.equals("basic")) {
        flavor = 'basic'
    } else if (variant.productFlavors[0].name.equals("plus1")) {
        flavor = 'plus'
    }
    def suffix = project.ext.versionName + '-b' + project.ext.versionCode + '-' + flavor
    def name = "$project.buildDir/frostwire-android-" + variant.buildType.name + '-' + suffix

    variant.outputs.each { output ->
        output.outputFile = file(name + '.apk')
    }
}

def removeExplodedFile(group, name, version, exclude) {
    exclude.each {
        String path = "${group}/${name}/${version}/${it}"
        File file = file("${buildDir}/intermediates/exploded-aar/${path}")
        if (file.exists()) {
            file.delete();
        }
    }
}

project.ext.versionCode = manifestVersionCode()
project.ext.versionName = manifestVersionName()

android {

    compileSdkVersion 17
    buildToolsVersion "24.0.3"

    defaultConfig {
        versionName project.ext.versionName
        
        //Added by muckachina for espresso
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res', 'apollo/res', "material"]
            aidl.srcDirs = ['src', 'apollo/src']
            assets.srcDirs = ['assets']
            java {
                srcDir '../common/src/main/java'
                srcDir 'apollo/src'
                srcDir 'src'
            }
        }

        //Added by muckachina for espresso - Setting the root of instrumentation test 
        androidTest.setRoot('androidTest')
    
        plus1.res.srcDirs = ['res-plus1']
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "2g"
        jumboMode = true
    }

    signingConfigs {
        release {
            storeFile file("../../frostwire-tools/installer_builders/android.keystore/frostwire.keystore")
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        basic {
            applicationId 'com.frostwire.android'
            versionCode 9010000 + project.ext.versionCode
        }
        plus1 {
            applicationId 'com.frostwire.android'
            versionCode 9050000 + project.ext.versionCode
        }
    }

    applicationVariants.all { variant ->
        changeApkOutput(variant)
    }
}

dependencies {
    compile "com.android.support:design:24.2.1"
    compile 'com.google.android.gms:play-services-ads-lite:9.6.1'
    compile 'com.google.android.gms:play-services-base:9.6.1'
    compile 'com.inmobi.monetization:inmobi-ads:6.0.2'
    compile 'com.squareup.picasso:picasso:2.5.2'

    compile "com.frostwire:jlibtorrent-android-arm:1.2.0.1"
    compile "com.frostwire:jlibtorrent-android-x86:1.2.0.1"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    
    //Added by muckachina for espresso - Test dependencies 
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
    }
    
}

tasks.create("excludeMaterialResources") << {
    removeExplodedFile("com.android.support", "appcompat-v7", "24.2.1",
            ["res/values-ldltr-v21/values-ldltr-v21.xml",
             "res/values-v21/values-v21.xml",
             "res/values-v22/values-v22.xml",
             "res/values-v23/values-v23.xml",
             "res/drawable-v21/abc_action_bar_item_background_material.xml",
             "res/drawable-v21/abc_btn_colored_material.xml",
             "res/drawable-v23/abc_control_background_material.xml",
             "res/color-v23/abc_color_highlight_material.xml"])

    removeExplodedFile("com.android.support", "appcompat-v7", "24.2.1",
            ["res/drawable/abc_ic_ab_back_material.xml",
             "res/drawable/abc_ic_arrow_drop_right_black_24dp.xml",
             "res/drawable/abc_ic_clear_material.xml",
             "res/drawable/abc_ic_go_search_api_material.xml",
             "res/drawable/abc_ic_menu_overflow_material.xml",
             "res/drawable/abc_ic_search_api_material.xml",
             "res/drawable/abc_ic_voice_search_api_material.xml",
             "res/drawable/abc_ratingbar_indicator_material.xml",
             "res/drawable/abc_ratingbar_material.xml",
             "res/drawable/abc_ratingbar_small_material.xml",
             "res/drawable/abc_vector_test.xml"])

    removeExplodedFile("com.android.support", "design", "24.2.1",
            ["res/values-v21/values-v21.xml",
             "res/anim-v21/design_bottom_sheet_slide_in.xml",
             "res/anim-v21/design_bottom_sheet_slide_out.xml"])

    removeExplodedFile("com.android.support", "design", "24.2.1",
            ["res/drawable/design_ic_visibility.xml"])
}

tasks.whenTaskAdded({
    if (it.name.matches(/^process.*Resources$/)) {
        it.dependsOn excludeMaterialResources
    }
})

class DeployRelease extends DefaultTask {

    String flavor = 'unknown'

    def version = project.ext.versionName
    def build = project.ext.versionCode

    def runCmd(cmd) {
        println(cmd)

        def p = Runtime.getRuntime().exec(cmd)
        def stdOut = new BufferedReader(new InputStreamReader(p.getInputStream()))

        def s
        while ((s = stdOut.readLine()) != null) {
            println(s)
        }
    }

    @TaskAction
    def run() {

        println "Building and installing..."
        println "VERSION: $version"
        println "BUILD: $build"
        println "FLAVOR: $flavor"

        def suffix = version + '-b' + build + '-' + flavor
        def filename = "$project.buildDir/frostwire-android-release-" + suffix + '.apk'

        runCmd("adb uninstall com.frostwire.android")
        runCmd("./gradlew clean assembleRelease")
        runCmd("adb install $filename")
    }
}

task deployBasic(type: DeployRelease) {
    flavor = 'basic'
}

task deployPlus(type: DeployRelease) {
    flavor = 'plus'
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':assembleRelease')) {

        def myKeyAlias = ""
        def myKeyPassword = ""

        if (System.console() == null) {
            new groovy.swing.SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Enter keystore data',
                        alwaysOnTop: true,
                        resizable: true,
                        locationRelativeTo: null,
                        show: true,
                        size: [215, 147]
                ) {
                    vbox {
                        label(text: "Key Alias:")
                        inputAlias = textField()
                        label(text: "Key Password:")
                        inputPassword = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            myKeyAlias = inputAlias.text
                            myKeyPassword = new String(inputPassword.password)
                            dispose();
                        })
                    }
                }
            }
        } else {
            myKeyAlias = System.console().readPassword("\nKey Alias: ")
            myKeyAlias = new String(myKeyAlias)
            myKeyPassword = System.console().readPassword("\nKey Password: ")
            myKeyPassword = new String(myKeyPassword)
        }

        android.signingConfigs.release.keyAlias = myKeyAlias
        android.signingConfigs.release.storePassword = myKeyPassword
        android.signingConfigs.release.keyPassword = myKeyPassword
    }
}
